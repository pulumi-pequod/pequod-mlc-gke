# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 master_version: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[float]] = None,
                 node_machine_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] master_version: K8s cluster master version to use.
        :param pulumi.Input[float] node_count: Initial node count for the cluster.
        :param pulumi.Input[str] node_machine_type: Machine type to use for the nodes.
        """
        if master_version is not None:
            pulumi.set(__self__, "master_version", master_version)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if node_machine_type is not None:
            pulumi.set(__self__, "node_machine_type", node_machine_type)

    @property
    @pulumi.getter(name="masterVersion")
    def master_version(self) -> Optional[pulumi.Input[str]]:
        """
        K8s cluster master version to use.
        """
        return pulumi.get(self, "master_version")

    @master_version.setter
    def master_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_version", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[float]]:
        """
        Initial node count for the cluster.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="nodeMachineType")
    def node_machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Machine type to use for the nodes.
        """
        return pulumi.get(self, "node_machine_type")

    @node_machine_type.setter
    def node_machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_machine_type", value)


class Cluster(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 master_version: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[float]] = None,
                 node_machine_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] master_version: K8s cluster master version to use.
        :param pulumi.Input[float] node_count: Initial node count for the cluster.
        :param pulumi.Input[str] node_machine_type: Machine type to use for the nodes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 master_version: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[float]] = None,
                 node_machine_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["master_version"] = master_version
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["node_machine_type"] = node_machine_type
            __props__.__dict__["cluster_name"] = None
            __props__.__dict__["kubeconfig"] = None
        super(Cluster, __self__).__init__(
            'gke:index:Cluster',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def cluster_name(self) -> pulumi.Output[str]:
        """
        GKE cluster name
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        """
        K8s cluster kubeconfig.
        """
        return pulumi.get(self, "kubeconfig")

